@page "/skiasharp"
@inject IJSRuntime JS
@rendermode InteractiveWebAssembly


<canvas id="skiaCanvas" width="600" height="400"></canvas>

@code {
    private IJSObjectReference _module = null!;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_module is not null)
            {
                // Import the JavaScript module
                _module = await JS.InvokeAsync<IJSObjectReference>(
                    "import", "./js/skiaInterop.js");
            }

            // Generate the image using SkiaSharp
            using var bitmap = new SKBitmap(600, 400);
            using var canvas = new SKCanvas(bitmap);
            canvas.Clear(SKColors.White);

            // Draw a circle
            using var paint = new SKPaint
                {
                    Color = SKColors.Blue,
                    IsAntialias = true
                };
            canvas.DrawCircle(300, 200, 100, paint);

            // Encode the bitmap to PNG
            using var image = SKImage.FromBitmap(bitmap);
            using var data = image.Encode(SKEncodedImageFormat.Png, 100);
            var bytes = data.ToArray();

            // Convert bytes to base64 string
            var base64 = Convert.ToBase64String(bytes);

            if (_module is not null)
            {
                // Call the JavaScript function to render the image
                await _module.InvokeVoidAsync("renderSkiaImage", "skiaCanvas", base64);

            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }
}
